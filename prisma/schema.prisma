generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String            @id @default(cuid())
  email             String            @unique
  name              String?
  password          String
  role              UserRole          @default(ADMIN)
  created_at        DateTime          @default(now())
  updated_at        DateTime          @updatedAt
  payment_schedules PaymentSchedule[]
  payments          Payment[]
  reminders         Reminder[]
  residents         Resident[]

  @@map("users")
}

model Resident {
  id             String                @id @default(cuid())
  name           String
  address        String
  phone          String                @unique
  email          String?
  rt             Int
  rw             Int
  blok           String?
  house_number   String?
  payment_index  Int?                  @unique
  ownership      HouseOwnership?
  is_active      Boolean               @default(true)
  created_at     DateTime              @default(now())
  updated_at     DateTime              @updatedAt
  created_by_id  String
  rt_id          String?
  bank_mutations BankMutation[]
  schedule_items PaymentScheduleItem[]
  payments       Payment[]
  reminders      Reminder[]
  bank_aliases   ResidentBankAlias[]
  created_by     User                  @relation(fields: [created_by_id], references: [id])
  rt_relation    RT?                   @relation(fields: [rt_id], references: [id])

  @@map("residents")
}

model PaymentPeriod {
  id             String                @id @default(cuid())
  name           String
  month          Int
  year           Int
  amount         Float
  due_date       DateTime
  is_active      Boolean               @default(true)
  created_at     DateTime              @default(now())
  updated_at     DateTime              @updatedAt
  schedule_items PaymentScheduleItem[]
  schedules      PaymentSchedule[]

  @@map("payment_periods")
}

model Payment {
  id             String                @id @default(cuid())
  amount         Float
  payment_date   DateTime
  status         PaymentStatus         @default(PENDING)
  payment_method String?
  notes          String?
  created_at     DateTime              @default(now())
  updated_at     DateTime              @updatedAt
  resident_id    String
  created_by_id  String
  bank_mutations BankMutation[]
  proofs         PaymentProof[]
  schedule_items PaymentScheduleItem[]
  verifications  PaymentVerification[]
  created_by     User                  @relation(fields: [created_by_id], references: [id])
  resident       Resident              @relation(fields: [resident_id], references: [id])

  @@map("payments")
}

model PaymentProof {
  id              String   @id @default(cuid())
  filename        String
  file_path       String
  file_size       Int
  mime_type       String
  analyzed        Boolean  @default(false)
  analysis_result String?
  created_at      DateTime @default(now())
  payment_id      String
  payment         Payment  @relation(fields: [payment_id], references: [id])

  @@map("payment_proofs")
}

model Reminder {
  id            String         @id @default(cuid())
  type          ReminderType
  message       String
  sent_at       DateTime?
  status        ReminderStatus @default(PENDING)
  sent_via      String?
  response      String?
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt
  resident_id   String
  created_by_id String
  created_by    User           @relation(fields: [created_by_id], references: [id])
  resident      Resident       @relation(fields: [resident_id], references: [id])

  @@map("reminders")
}

model PaymentSchedule {
  id            String                @id @default(cuid())
  name          String
  description   String?
  start_date    DateTime
  end_date      DateTime
  is_active     Boolean               @default(true)
  created_at    DateTime              @default(now())
  updated_at    DateTime              @updatedAt
  period_id     String
  created_by_id String
  items         PaymentScheduleItem[]
  created_by    User                  @relation(fields: [created_by_id], references: [id])
  period        PaymentPeriod         @relation(fields: [period_id], references: [id])

  @@map("payment_schedules")
}

model PaymentScheduleItem {
  id          String                    @id @default(cuid())
  type        PaymentScheduleItemType   @default(MONTHLY)
  label       String?
  status      PaymentScheduleItemStatus @default(PLANNED)
  amount      Float
  due_date    DateTime
  paid_date   DateTime?
  notes       String?
  created_at  DateTime                  @default(now())
  updated_at  DateTime                  @updatedAt
  schedule_id String
  period_id   String
  resident_id String
  payment_id  String?
  payment     Payment?                  @relation(fields: [payment_id], references: [id])
  period      PaymentPeriod             @relation(fields: [period_id], references: [id])
  resident    Resident                  @relation(fields: [resident_id], references: [id])
  schedule    PaymentSchedule           @relation(fields: [schedule_id], references: [id])

  @@index([resident_id])
  @@index([period_id])
  @@index([schedule_id])
  @@index([payment_id])
  @@map("payment_schedule_items")
}

model RT {
  id         String     @id @default(cuid())
  number     Int
  rw         Int
  chairman   String?
  phone      String?
  is_active  Boolean    @default(true)
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  residents  Resident[]

  @@unique([number, rw])
  @@map("rts")
}

model PaymentVerification {
  id                  String                    @id @default(cuid())
  payment_id          String
  verified_by         String
  verification_method PaymentVerificationMethod
  status              PaymentStatus
  notes               String?
  verification_data   String?
  created_at          DateTime                  @default(now())
  updated_at          DateTime                  @updatedAt
  payment             Payment                   @relation(fields: [payment_id], references: [id], onDelete: Cascade)

  @@index([payment_id])
  @@index([verified_by])
  @@map("payment_verifications")
}

model Settings {
  id         String   @id @default(cuid())
  key        String   @unique
  value      String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("settings")
}

model BankMutation {
  id                   String                     @id @default(cuid())
  transaction_date     DateTime
  description          String
  amount               Float
  balance              Float?
  reference_number     String?
  transaction_type     String?
  category             BankTransactionCategory?
  is_omitted           Boolean                    @default(false)
  omit_reason          String?
  is_verified          Boolean                    @default(false)
  verified_at          DateTime?
  verified_by          String?
  matched_payment_id   String?
  matched_resident_id  String?
  match_score          Float?
  matching_strategy    String?
  raw_data             String
  upload_batch         String
  file_name            String?
  created_at           DateTime                   @default(now())
  updated_at           DateTime                   @updatedAt
  verification_history BankMutationVerification[]
  matched_payment      Payment?                   @relation(fields: [matched_payment_id], references: [id])
  matched_resident     Resident?                  @relation(fields: [matched_resident_id], references: [id])

  @@index([upload_batch])
  @@index([transaction_date])
  @@index([amount])
  @@index([is_verified])
  @@index([transaction_type])
  @@index([category])
  @@index([is_omitted])
  @@map("bank_mutations")
}

model BankMutationVerification {
  id                          String                 @id @default(cuid())
  mutation_id                 String
  action                      BankVerificationAction
  confidence                  Float?
  notes                       String?
  verified_by                 String
  previous_matched_payment_id String?
  new_matched_payment_id      String?
  created_at                  DateTime               @default(now())
  mutation                    BankMutation           @relation(fields: [mutation_id], references: [id], onDelete: Cascade)

  @@index([mutation_id])
  @@index([verified_by])
  @@map("bank_mutation_verifications")
}

model ResidentBankAlias {
  id          String   @id @default(cuid())
  resident_id String
  bank_name   String
  is_verified Boolean  @default(false)
  frequency   Int      @default(1)
  last_seen   DateTime @default(now())
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  resident    Resident @relation(fields: [resident_id], references: [id], onDelete: Cascade)

  @@unique([resident_id, bank_name])
  @@index([bank_name])
  @@map("resident_bank_aliases")
}

model VerificationLearningData {
  id                   String   @id @default(cuid())
  resident_id          String   @unique
  name_patterns        String
  address_patterns     String
  transaction_patterns String
  confidence_scores    String
  last_updated         DateTime @default(now())
  created_at           DateTime @default(now())
  updated_at           DateTime @updatedAt

  @@map("verification_learning_data")
}

enum PaymentScheduleItemType {
  MONTHLY
  SPECIAL
  DONATION
}

enum PaymentScheduleItemStatus {
  PLANNED
  PAID
  SKIPPED
  CARRIED_OVER
  OPTIONAL
}

enum UserRole {
  ADMIN
  EDITOR
  READER
}

enum PaymentVerificationMethod {
  MANUAL_CHECK
  BANK_STATEMENT
  TRANSFER_PROOF
  AI_ANALYSIS
  WHATSAPP_BOT
}

enum PaymentStatus {
  PENDING
  VERIFIED
  REJECTED
  MANUAL_PAID
}

enum ReminderType {
  PAYMENT_DUE
  PAYMENT_OVERDUE
  PAYMENT_CONFIRMATION
  GENERAL_ANNOUNCEMENT
}

enum ReminderStatus {
  PENDING
  SENT
  DELIVERED
  FAILED
}

enum BankTransactionCategory {
  IPL
  THR
  SUMBANGAN
  DEPOSIT_RENOVASI
  BIAYA_ADMIN
  LAINNYA
}

enum BankVerificationAction {
  AUTO_MATCH
  MANUAL_CONFIRM
  MANUAL_REJECT
  MANUAL_OVERRIDE
  SYSTEM_UNMATCH
  MANUAL_OMIT
}

enum HouseOwnership {
  MILIK
  SEWA
}
